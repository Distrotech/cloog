{"name":"Cloog","tagline":"Mirror Of git://repo.or.cz/cloog.git","body":"#\r\n#  /**-------------------------------------------------------------------**\r\n#   **                              CLooG                                **\r\n#   **-------------------------------------------------------------------**\r\n#   **                     The Chunky Loop Generator                     **\r\n#   **-------------------------------------------------------------------**\r\n#   **           First version of this file: january 22th 2002           **\r\n#   **-------------------------------------------------------------------**/\r\n#\r\n\r\nFor complete informations about this software, how to build and use it,\r\nplease see the postscript file in the ./doc subdirectory (a pdf version\r\nis available in the web site).\r\n\r\nOverview :\r\nI.   Description \r\nII.  Building CLooG\r\nIII. Options\r\nIV.  Running CLooG\r\nV.   General Questions\r\n\r\n#   **-------------------------------------------------------------------**\r\n#   **                        I. Description                             **\r\n#   **-------------------------------------------------------------------**/\r\n\r\nCLooG is a software which generates loops for scanning Z-polyhedra. That is,\r\nCLooG finds the code or pseudo-code where each integral point of one or more\r\nparametrized polyhedron or parametrized polyhedra union is reached. CLooG is\r\ndesigned to avoid control overhead and to produce a very efficient code.\r\n\r\nIts input is some data on the polyhedra to scan, basically the system of\r\naffine inequalities that define them, and a context that defines some\r\nproperties known on the parameters if any. The output is the pseudo scanning\r\ncode. Many facilities are provided to generate a near-to-be-compileable code,\r\nand every useful functions to generate the code may be called from the CLooG\r\nlibrary.\r\n\r\n            INPUT                   |                 OUTPUT\r\n(fortunately not exactly the input, |   (the real one, with default options)\r\n check test/readme.cloog for the    |\r\n real input for that problem !)\t    |\r\n\t                            |\r\n\tj^ i>=2                     |\r\n         | | j<=n+2-i               |\r\n         | |\\     | i<=n            |\r\n         | | \\    |                 |\r\n       m-+-****---+-j<=m            |    for (i=2;i<=n;i++) {\r\n         | *****  |                 |      for (j=2;j<=min(m,-i+n+2);j++) {    \r\n         | ****** |                ==>       S1 ;\r\n         | *******|                 |      }\r\n       2-+-********-j>=2            |    }\r\n         | |      |\\                |\r\n       0-+-+------+--->i            |\r\n         | |      |                 |\r\n         0 2      n                 |\r\n                                    |\r\n       Context : n>=2               |\r\n                 m>=2               |\r\n       System  : 2<=i<=n            |\r\n                 2<=j<=m            |\r\n\t\t j<=n+2-i           |\r\n\r\n#   **-------------------------------------------------------------------**\r\n#   **                      II. Building CLooG                           **\r\n#   **-------------------------------------------------------------------**/\r\n\r\nIf you obtained CLooG from the git repository, then you first\r\nneed to obtain the submodules and create a configure script.\r\n\r\n  ./get_submodules.sh\r\n  ./autogen.sh\r\n\r\nThe first step is only needed if you plan on using the isl backend.\r\n\r\nThe configure shell script attempts to guess correct values for various\r\nsystem-dependent variables used during compilation. It uses those values to\r\ncreate a Makefile. The file configure.ac is used to create configure by a\r\nprogram called autoconf.  You only need configure.ac if you want to change\r\nit or regenerate configure using a newer version of autoconf.\r\n\r\nThe simplest way to compile this package is:\r\ncd to the directory containing the package's source code and type \r\n\r\n  ./configure\r\n\r\nto configure the package for your system (while running, configure prints\r\nsome messages telling which features it is checking for). To compile the\r\npackage, type\r\n\r\n  make\r\n  \r\n\r\nto install the program and/or the library, type\r\n\r\n  make install\r\n\r\nyou can remove the program binaries and object files from the source code\r\ndirectory by typing\r\n  \r\n  make clean\r\n  \r\nTo also remove the files that configure created (so you can compile the\r\npackage for a different kind of computer) type\r\n  \r\n  make distclean\r\n\r\n#   **-------------------------------------------------------------------**\r\n#   **                           III. Options                            **\r\n#   **-------------------------------------------------------------------**/\r\n\r\nBy default,  make will install the package's files in /usr/local/bin,\r\n/usr/local/lib, etc. You can specify an installation prefix other than \r\n/usr/local by giving onfigure the option --prefix=PATH.\r\n\r\nBy default, configure will use the isl that comes bundled with CLooG.\r\nUsing the --with-isl option of configure the user can specify that \"no\" isl,\r\na previously installed (\"system\") isl or a \"build\" isl should be used.\r\nIn the latter case, the user should also specify the build location\r\nusing --with-isl-builddir=PATH.  In case of an installed isl,\r\nthe installation location can be specified using the\r\n--with-isl-prefix=PATH and --with-isl-exec-prefix=PATH options of configure.\r\n\r\nBy default, configure will seek the PolyLib in standard locations.\r\nIf necessary, you can specify the PolyLib's path by giving configure the\r\noption --with-polylib-prefix=PATH and/or --with-polylib-exec-prefix=PATH.\r\n\r\nBy default, configure will seek the GMP library in standard locations.\r\nIf necessary, you can specify the GMP's path by giving configure the\r\noption --with-gmp-prefix=PATH and/or --with-gmp-exec-prefix=PATH.\r\n\r\nBy default, when using the PolyLib backend,\r\nCLooG and its library are built using 64 bits integer\r\nrepresentation. You can choose to specify explicitly others integer\r\nrepresentations by using:\r\n--with-bits=32  for 32 bits integers,\r\n--with-bits=64  for 64 bits integers (default),\r\n--with-bits=gmp for multiple precision integers.\r\n\r\n#   **-------------------------------------------------------------------**\r\n#   **                         IV. Running CLooG                         **\r\n#   **-------------------------------------------------------------------**/\r\n\r\nTo run CLooG, simply type 'cloog', optionally followed by the name of an\r\ninput file. You can type 'cloog -h' or 'cloog --help' for some help.\r\nFor more informations, please check the ./doc subdirectory.\r\n\r\n#   **-------------------------------------------------------------------**\r\n#   **                        V. General Questions                       **\r\n#   **-------------------------------------------------------------------**/\r\n\r\n1. What does CLooG means ?\r\n\r\nCLooG is the Chunky LOOp Generator, Chunky is an automatic loop optimizer for\r\ndata locality. CLooG is a completely independent part of the Chunky project.\r\nPronounce 'CLooG' as 'klug', which means 'sly' in german :-).\r\n\r\n2. CLooG do not compile, what should I do ?\r\n\r\nCLooG should compile everywhere (assuming that PolyLib is still there), thus\r\nthere is a problem or the documentation is not clear, in both case it is\r\nnecessary to ask the author(s) !\r\n\r\n3. I need a feature that CLooG do not implement, what should I do ?\r\n\r\nThere are two ways. First, CLooG is a LGPL software and library. So you\r\nare welcome to improve it yourself ;-) ! Many project have been successful, it\r\nis -maybe- a sign that this is not too hard to put your hands inside the\r\nsource. Second, just ask the author(s) :-) ! Maybe a lot of people would be\r\ninteressed by such feature, maybe many people asked for it before, maybe it's\r\ntrivial to implement (and even)... Please just never hesitate to ask the\r\nauthor(s) !\r\n\r\n4. I implemented a cool feature, can I submit it ?\r\n\r\nObviously you are welcome to send the author(s) any improvement. But obviously\r\nwe are quite careful with readability, correctness and stability, and the\r\nauthor(s) will read, check and check again any contribution before including it.\r\nThus, it can take time... There are few basic rules to write contributions:\r\n- (1) Do never change the indentation of any part of the code that is not yours.\r\n- (2) Do never send codes that use more than 80 columns.\r\n- (3) Do never send codes without a lot of comments in (bad or good) english.\r\n- (4) Do never send codes with obscure and/or non-english variable names.\r\n- (5) Use C89, just C, only C (note: \"//\" comments are not C89,\r\n  variable declaration elsewhere than at the beginning of a block, is not C89).\r\n- (6) Read doc/SubmittingPatches\r\nPlease understand that in order to live for a long time, and to be used in many\r\nprojects the very first priority for CLooG is to be readable and documented.\r\n\r\n5. Is CLooG bug free ?\r\n\r\nNo, who can ? ClooG is a complex program, and we do not pretend it to be bug\r\nfree. Nevertheless because it has been tested and tested, we are fairly sure\r\nthat CLooG results with default options have good chances to be satisfactory.\r\nIf you find a result that looks strange, inadequate or incorrect, please send:\r\n- (1) The input file to the author(s).\r\n- (2) The output.\r\n- (3) The first line given by typing 'cloog -v'.\r\n- (4) All your command line options to achieve the result.\r\nWe will try to explain the result or to fix the problem as soon as possible.\r\n\r\n6. How can I contact the author(s) ?\r\n\r\nJust send a mail to cloog-development@googlegroups.com\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}